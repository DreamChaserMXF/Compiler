TokenNumber	LineNumber	TokenType	    TokenValue
1		1		CONST               const
2		1		IDENTIFIER          ARRLEN
3		1		EQU                 =
4		1		CONST_INTEGER       100
5		1		COMMA               ,
6		1		IDENTIFIER          NEGATIVE
7		1		EQU                 =
8		1		CONST_INTEGER       -1
9		1		COMMA               ,
10		1		IDENTIFIER          TRUE
11		1		EQU                 =
12		1		CONST_INTEGER       1
13		1		COMMA               ,
14		1		IDENTIFIER          FALSE
15		1		EQU                 =
16		1		CONST_INTEGER       0
17		1		COMMA               ,
18		1		IDENTIFIER          ENDCHAR
19		1		EQU                 =
20		1		CONST_CHAR          a
21		1		SEMICOLON           ;
22		3		VAR                 var
23		3		IDENTIFIER          i
24		3		COMMA               ,
25		3		IDENTIFIER          j
26		3		COMMA               ,
27		3		IDENTIFIER          k
28		3		COLON               :
29		3		RW_INTEGER          integer
30		3		SEMICOLON           ;
31		4		IDENTIFIER          lastChar
32		4		COLON               :
33		4		RW_CHAR             char
34		4		SEMICOLON           ;
35		5		IDENTIFIER          sum
36		5		COLON               :
37		5		RW_INTEGER          integer
38		5		SEMICOLON           ;
39		6		IDENTIFIER          sequence
40		6		COLON               :
41		6		ARRAY               array
42		6		LEFT_BRACKET        [
43		6		CONST_INTEGER       100
44		6		RIGHT_BRACKET       ]
45		6		OF                  of
46		6		RW_INTEGER          integer
47		6		SEMICOLON           ;
48		9		PROCEDURE           procedure
49		9		IDENTIFIER          sumP
50		9		LEFT_PAREN          (
51		9		IDENTIFIER          x
52		9		COMMA               ,
53		9		IDENTIFIER          y
54		9		COLON               :
55		9		RW_CHAR             char
56		9		SEMICOLON           ;
57		9		VAR                 var
58		9		IDENTIFIER          result
59		9		COLON               :
60		9		RW_INTEGER          integer
61		9		RIGHT_PAREN         )
62		9		SEMICOLON           ;
63		10		VAR                 var
64		10		IDENTIFIER          tempSumP
65		10		COLON               :
66		10		RW_INTEGER          integer
67		10		SEMICOLON           ;
68		11		BEGIN               begin
69		12		IDENTIFIER          result
70		12		ASSIGN              :=
71		12		MINUS               -
72		12		IDENTIFIER          x
73		12		PLUS                +
74		12		IDENTIFIER          y
75		13		END                 end
76		13		SEMICOLON           ;
77		15		FUNCTION            function
78		15		IDENTIFIER          sumF
79		15		LEFT_PAREN          (
80		15		IDENTIFIER          x
81		15		COMMA               ,
82		15		IDENTIFIER          y
83		15		COLON               :
84		15		RW_INTEGER          integer
85		15		RIGHT_PAREN         )
86		15		COLON               :
87		15		RW_INTEGER          integer
88		15		SEMICOLON           ;
89		16		VAR                 var
90		16		IDENTIFIER          result
91		16		COLON               :
92		16		RW_INTEGER          integer
93		16		SEMICOLON           ;
94		17		PROCEDURE           procedure
95		17		IDENTIFIER          sumFF
96		17		LEFT_PAREN          (
97		17		IDENTIFIER          x
98		17		COMMA               ,
99		17		IDENTIFIER          y
100		17		COLON               :
101		17		RW_INTEGER          integer
102		17		RIGHT_PAREN         )
103		17		SEMICOLON           ;
104		18		VAR                 var
105		18		IDENTIFIER          z
106		18		COLON               :
107		18		RW_INTEGER          integer
108		18		SEMICOLON           ;
109		19		BEGIN               begin
110		20		IDENTIFIER          z
111		20		ASSIGN              :=
112		20		IDENTIFIER          x
113		20		PLUS                +
114		20		IDENTIFIER          y
115		20		PLUS                +
116		20		CONST_INTEGER       1
117		20		PLUS                +
118		20		IDENTIFIER          x
119		20		PLUS                +
120		20		IDENTIFIER          y
121		21		END                 end
122		21		SEMICOLON           ;
123		22		BEGIN               begin
124		23		IDENTIFIER          result
125		23		ASSIGN              :=
126		23		IDENTIFIER          x
127		23		PLUS                +
128		23		IDENTIFIER          y
129		23		SEMICOLON           ;
130		24		IDENTIFIER          sumF
131		24		ASSIGN              :=
132		24		IDENTIFIER          result
133		24		SEMICOLON           ;
134		25		IDENTIFIER          sumFF
135		25		LEFT_PAREN          (
136		25		IDENTIFIER          x
137		25		COMMA               ,
138		25		IDENTIFIER          y
139		25		RIGHT_PAREN         )
140		26		END                 end
141		26		SEMICOLON           ;
142		28		BEGIN               begin
143		30		IDENTIFIER          i
144		30		ASSIGN              :=
145		30		CONST_INTEGER       10
146		30		MUL                 *
147		30		CONST_INTEGER       10
148		30		SEMICOLON           ;
149		31		IF                  if
150		31		IDENTIFIER          i
151		31		NEQ                 <>
152		31		CONST_INTEGER       0
153		32		THEN                then
154		32		IDENTIFIER          i
155		32		ASSIGN              :=
156		32		CONST_INTEGER       0
157		32		SEMICOLON           ;
158		33		IDENTIFIER          i
159		33		ASSIGN              :=
160		33		IDENTIFIER          i
161		33		PLUS                +
162		33		CONST_INTEGER       1
163		33		SEMICOLON           ;
164		34		IDENTIFIER          sum
165		34		ASSIGN              :=
166		34		CONST_INTEGER       0
167		34		MUL                 *
168		34		IDENTIFIER          i
169		34		SEMICOLON           ;
170		36		IF                  if
171		36		CONST_INTEGER       0
172		36		EQU                 =
173		36		IDENTIFIER          sum
174		37		THEN                then
175		37		IDENTIFIER          sum
176		37		ASSIGN              :=
177		37		CONST_INTEGER       1
178		38		ELSE                else
179		38		IDENTIFIER          sum
180		38		ASSIGN              :=
181		38		CONST_INTEGER       0
182		38		SEMICOLON           ;
183		42		BEGIN               begin
184		43		END                 end
185		43		SEMICOLON           ;
186		46		IDENTIFIER          i
187		46		ASSIGN              :=
188		46		CONST_INTEGER       1
189		46		SEMICOLON           ;
190		47		IDENTIFIER          sequence
191		47		LEFT_BRACKET        [
192		47		CONST_INTEGER       0
193		47		RIGHT_BRACKET       ]
194		47		ASSIGN              :=
195		47		CONST_INTEGER       0
196		47		SEMICOLON           ;
197		48		FOR                 for
198		48		IDENTIFIER          j
199		48		ASSIGN              :=
200		48		IDENTIFIER          i
201		48		TO                  to
202		48		CONST_INTEGER       10
203		48		MUL                 *
204		48		CONST_INTEGER       10
205		48		MINUS               -
206		48		CONST_INTEGER       1
207		49		DO                  do
208		50		BEGIN               begin
209		51		IDENTIFIER          sequence
210		51		LEFT_BRACKET        [
211		51		IDENTIFIER          j
212		51		RIGHT_BRACKET       ]
213		51		ASSIGN              :=
214		51		IDENTIFIER          j
215		51		PLUS                +
216		51		IDENTIFIER          sequence
217		51		LEFT_BRACKET        [
218		51		IDENTIFIER          j
219		51		MINUS               -
220		51		CONST_INTEGER       1
221		51		RIGHT_BRACKET       ]
222		51		SEMICOLON           ;
223		52		IF                  if
224		52		CONST_INTEGER       0
225		52		EQU                 =
226		52		IDENTIFIER          sequence
227		52		LEFT_BRACKET        [
228		52		IDENTIFIER          j
229		52		RIGHT_BRACKET       ]
230		53		THEN                then
231		53		BREAK               break
232		53		SEMICOLON           ;
233		54		IF                  if
234		54		CONST_INTEGER       1
235		54		EQU                 =
236		54		IDENTIFIER          sequence
237		54		LEFT_BRACKET        [
238		54		IDENTIFIER          j
239		54		RIGHT_BRACKET       ]
240		55		THEN                then
241		56		ELSE                else
242		56		CONTINUE            continue
243		57		END                 end
244		57		SEMICOLON           ;
245		58		IDENTIFIER          sequence
246		58		LEFT_BRACKET        [
247		58		CONST_INTEGER       1
248		58		RIGHT_BRACKET       ]
249		58		ASSIGN              :=
250		58		MINUS               -
251		58		IDENTIFIER          sequence
252		58		LEFT_BRACKET        [
253		58		CONST_INTEGER       1
254		58		RIGHT_BRACKET       ]
255		58		SEMICOLON           ;
256		60		WHILE               while
257		60		IDENTIFIER          i
258		60		LT                  <
259		60		CONST_INTEGER       10
260		61		DO                  do
261		62		BEGIN               begin
262		63		IDENTIFIER          i
263		63		ASSIGN              :=
264		63		IDENTIFIER          i
265		63		PLUS                +
266		63		CONST_INTEGER       1
267		63		SEMICOLON           ;
268		64		IF                  if
269		64		CONST_INTEGER       3
270		64		EQU                 =
271		64		IDENTIFIER          i
272		65		THEN                then
273		66		BEGIN               begin
274		67		IDENTIFIER          i
275		67		ASSIGN              :=
276		67		IDENTIFIER          i
277		67		PLUS                +
278		67		CONST_INTEGER       2
279		67		SEMICOLON           ;
280		68		END                 end
281		69		ELSE                else
282		69		IF                  if
283		69		CONST_INTEGER       5
284		69		EQU                 =
285		69		IDENTIFIER          i
286		70		THEN                then
287		70		BREAK               break
288		71		ELSE                else
289		71		CONTINUE            continue
290		72		END                 end
291		72		SEMICOLON           ;
292		74		IDENTIFIER          sequence
293		74		LEFT_BRACKET        [
294		74		IDENTIFIER          sequence
295		74		LEFT_BRACKET        [
296		74		CONST_INTEGER       0
297		74		RIGHT_BRACKET       ]
298		74		RIGHT_BRACKET       ]
299		74		ASSIGN              :=
300		74		IDENTIFIER          sequence
301		74		LEFT_BRACKET        [
302		74		IDENTIFIER          sequence
303		74		LEFT_BRACKET        [
304		74		CONST_INTEGER       1
305		74		RIGHT_BRACKET       ]
306		74		PLUS                +
307		74		IDENTIFIER          sequence
308		74		LEFT_BRACKET        [
309		74		CONST_INTEGER       2
310		74		RIGHT_BRACKET       ]
311		74		PLUS                +
312		74		IDENTIFIER          sequence
313		74		LEFT_BRACKET        [
314		74		CONST_INTEGER       1
315		74		PLUS                +
316		74		CONST_INTEGER       2
317		74		RIGHT_BRACKET       ]
318		74		RIGHT_BRACKET       ]
319		74		SEMICOLON           ;
320		75		IDENTIFIER          i
321		75		ASSIGN              :=
322		75		CONST_CHAR          a
323		75		SEMICOLON           ;
324		76		IDENTIFIER          i
325		76		ASSIGN              :=
326		76		CONST_INTEGER       2147483647
327		76		SEMICOLON           ;
328		77		IDENTIFIER          i
329		77		ASSIGN              :=
330		77		IDENTIFIER          ARRLEN
331		77		SEMICOLON           ;
332		78		FOR                 for
333		78		IDENTIFIER          j
334		78		ASSIGN              :=
335		78		CONST_INTEGER       100
336		78		DOWNTO              downto
337		78		CONST_INTEGER       1
338		79		DO                  do
339		80		BEGIN               begin
340		81		WRITE               write
341		81		LEFT_PAREN          (
342		81		CONST_STRING        error for "sum"
343		81		RIGHT_PAREN         )
344		81		SEMICOLON           ;
345		82		IDENTIFIER          k
346		82		ASSIGN              :=
347		82		IDENTIFIER          sumF
348		82		LEFT_PAREN          (
349		82		IDENTIFIER          i
350		82		COMMA               ,
351		82		IDENTIFIER          j
352		82		PLUS                +
353		82		IDENTIFIER          i
354		82		RIGHT_PAREN         )
355		82		SEMICOLON           ;
356		83		IDENTIFIER          sum
357		83		ASSIGN              :=
358		83		IDENTIFIER          sumF
359		83		LEFT_PAREN          (
360		83		IDENTIFIER          sum
361		83		COMMA               ,
362		83		IDENTIFIER          j
363		83		MINUS               -
364		83		IDENTIFIER          i
365		83		RIGHT_PAREN         )
366		84		END                 end
367		84		SEMICOLON           ;
368		88		CASE                case
369		88		IDENTIFIER          sum
370		88		MUL                 *
371		88		CONST_INTEGER       2
372		88		PLUS                +
373		88		CONST_INTEGER       1
374		88		OF                  of
375		88		CONST_INTEGER       1
376		89		COLON               :
377		89		WRITE               write
378		89		LEFT_PAREN          (
379		89		CONST_STRING        error for sum
380		89		RIGHT_PAREN         )
381		89		SEMICOLON           ;
382		89		CONST_INTEGER       10101
383		90		COLON               :
384		90		WRITE               write
385		90		LEFT_PAREN          (
386		90		CONST_STRING        right for sum
387		90		RIGHT_PAREN         )
388		90		SEMICOLON           ;
389		90		CONST_INTEGER       520
390		91		COLON               :
391		91		WRITE               write
392		91		LEFT_PAREN          (
393		91		CONST_STRING        error for sum
394		91		RIGHT_PAREN         )
395		91		SEMICOLON           ;
396		92		IDENTIFIER          ARRLEN
397		92		COLON               :
398		92		WRITE               write
399		92		LEFT_PAREN          (
400		92		CONST_STRING        error for sum
401		92		RIGHT_PAREN         )
402		93		END                 end
403		93		SEMICOLON           ;
404		95		READ                read
405		95		LEFT_PAREN          (
406		95		IDENTIFIER          sum
407		95		RIGHT_PAREN         )
408		95		SEMICOLON           ;
409		96		IDENTIFIER          sumP
410		96		LEFT_PAREN          (
411		96		IDENTIFIER          ENDCHAR
412		96		COMMA               ,
413		96		IDENTIFIER          lastChar
414		96		COMMA               ,
415		96		IDENTIFIER          sum
416		96		RIGHT_PAREN         )
417		96		SEMICOLON           ;
418		97		IDENTIFIER          sumP
419		97		LEFT_PAREN          (
420		97		IDENTIFIER          ENDCHAR
421		97		COMMA               ,
422		97		CONST_CHAR          c
423		97		COMMA               ,
424		97		IDENTIFIER          sequence
425		97		LEFT_BRACKET        [
426		97		CONST_INTEGER       3
427		97		PLUS                +
428		97		CONST_INTEGER       5
429		97		RIGHT_BRACKET       ]
430		97		RIGHT_PAREN         )
431		97		SEMICOLON           ;
432		98		WRITE               write
433		98		LEFT_PAREN          (
434		98		IDENTIFIER          sum
435		98		RIGHT_PAREN         )
436		98		SEMICOLON           ;
437		99		WRITE               write
438		99		LEFT_PAREN          (
439		99		IDENTIFIER          sequence
440		99		LEFT_BRACKET        [
441		99		IDENTIFIER          j
442		99		PLUS                +
443		99		CONST_INTEGER       1
444		99		PLUS                +
445		99		CONST_INTEGER       2
446		99		RIGHT_BRACKET       ]
447		99		RIGHT_PAREN         )
448		101		END                 end
449		101		PERIOD              .
