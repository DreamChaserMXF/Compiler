TokenNumber	LineNumber	TokenType	    TokenValue
1		1		CONST               const
2		1		IDENTIFIER          ARRLEN
3		1		EQU                 =
4		1		CONST_INTEGER       100
5		1		COMMA               ,
6		1		IDENTIFIER          NEGATIVE
7		1		EQU                 =
8		1		CONST_INTEGER       -1
9		1		COMMA               ,
10		1		IDENTIFIER          TRUE
11		1		EQU                 =
12		1		CONST_INTEGER       1
13		1		COMMA               ,
14		1		IDENTIFIER          FALSE
15		1		EQU                 =
16		1		CONST_INTEGER       0
17		1		COMMA               ,
18		1		IDENTIFIER          ENDCHAR
19		1		EQU                 =
20		1		CONST_CHAR          a
21		1		SEMICOLON           ;
22		3		VAR                 var
23		3		IDENTIFIER          i
24		3		COMMA               ,
25		3		IDENTIFIER          j
26		3		COMMA               ,
27		3		IDENTIFIER          k
28		3		COLON               :
29		3		RW_INTEGER          integer
30		3		SEMICOLON           ;
31		4		IDENTIFIER          lastChar
32		4		COLON               :
33		4		RW_CHAR             char
34		4		SEMICOLON           ;
35		5		IDENTIFIER          sum
36		5		COLON               :
37		5		RW_INTEGER          integer
38		5		SEMICOLON           ;
39		6		IDENTIFIER          sequence
40		6		COLON               :
41		6		ARRAY               array
42		6		LEFT_BRACKET        [
43		6		CONST_INTEGER       100
44		6		RIGHT_BRACKET       ]
45		6		OF                  of
46		6		RW_INTEGER          integer
47		6		SEMICOLON           ;
48		9		PROCEDURE           procedure
49		9		IDENTIFIER          sumP
50		9		LEFT_PAREN          (
51		9		IDENTIFIER          x
52		9		COMMA               ,
53		9		IDENTIFIER          y
54		9		COLON               :
55		9		RW_CHAR             char
56		9		SEMICOLON           ;
57		9		VAR                 var
58		9		IDENTIFIER          result
59		9		COLON               :
60		9		RW_INTEGER          integer
61		9		RIGHT_PAREN         )
62		9		SEMICOLON           ;
63		10		VAR                 var
64		10		IDENTIFIER          tempSumP
65		10		COLON               :
66		10		RW_INTEGER          integer
67		10		SEMICOLON           ;
68		11		BEGIN               begin
69		12		IDENTIFIER          result
70		12		ASSIGN              :=
71		12		MINUS               -
72		12		IDENTIFIER          x
73		12		PLUS                +
74		12		IDENTIFIER          y
75		13		END                 end
76		13		SEMICOLON           ;
77		15		FUNCTION            function
78		15		IDENTIFIER          sumF
79		15		LEFT_PAREN          (
80		15		IDENTIFIER          x
81		15		COMMA               ,
82		15		IDENTIFIER          y
83		15		COLON               :
84		15		RW_INTEGER          integer
85		15		RIGHT_PAREN         )
86		15		COLON               :
87		15		RW_INTEGER          integer
88		15		SEMICOLON           ;
89		16		VAR                 var
90		16		IDENTIFIER          result
91		16		COLON               :
92		16		RW_INTEGER          integer
93		16		SEMICOLON           ;
94		17		PROCEDURE           procedure
95		17		IDENTIFIER          sumFF
96		17		LEFT_PAREN          (
97		17		IDENTIFIER          x
98		17		COMMA               ,
99		17		IDENTIFIER          y
100		17		COLON               :
101		17		RW_INTEGER          integer
102		17		RIGHT_PAREN         )
103		17		SEMICOLON           ;
104		18		VAR                 var
105		18		IDENTIFIER          z
106		18		COLON               :
107		18		RW_INTEGER          integer
108		18		SEMICOLON           ;
109		19		BEGIN               begin
110		20		IDENTIFIER          z
111		20		ASSIGN              :=
112		20		IDENTIFIER          x
113		20		PLUS                +
114		20		IDENTIFIER          y
115		20		PLUS                +
116		20		CONST_INTEGER       1
117		20		PLUS                +
118		20		IDENTIFIER          x
119		20		PLUS                +
120		20		IDENTIFIER          y
121		21		END                 end
122		21		SEMICOLON           ;
123		22		BEGIN               begin
124		23		IDENTIFIER          result
125		23		ASSIGN              :=
126		23		IDENTIFIER          x
127		23		PLUS                +
128		23		IDENTIFIER          y
129		23		SEMICOLON           ;
130		24		IDENTIFIER          sumF
131		24		ASSIGN              :=
132		24		IDENTIFIER          result
133		24		SEMICOLON           ;
134		25		IDENTIFIER          sumFF
135		25		LEFT_PAREN          (
136		25		IDENTIFIER          x
137		25		COMMA               ,
138		25		IDENTIFIER          y
139		25		RIGHT_PAREN         )
140		26		END                 end
141		26		SEMICOLON           ;
142		28		BEGIN               begin
143		30		IDENTIFIER          i
144		30		ASSIGN              :=
145		30		CONST_INTEGER       10
146		30		MUL                 *
147		30		CONST_INTEGER       10
148		30		SEMICOLON           ;
149		31		IF                  if
150		31		IDENTIFIER          i
151		31		NEQ                 <>
152		31		CONST_INTEGER       0
153		32		THEN                then
154		32		IDENTIFIER          i
155		32		ASSIGN              :=
156		32		CONST_INTEGER       0
157		32		SEMICOLON           ;
158		33		IDENTIFIER          i
159		33		ASSIGN              :=
160		33		IDENTIFIER          i
161		33		PLUS                +
162		33		CONST_INTEGER       1
163		33		SEMICOLON           ;
164		34		IDENTIFIER          sum
165		34		ASSIGN              :=
166		34		CONST_INTEGER       0
167		34		MUL                 *
168		34		IDENTIFIER          i
169		34		SEMICOLON           ;
170		36		IF                  if
171		36		CONST_INTEGER       0
172		36		EQU                 =
173		36		IDENTIFIER          sum
174		37		THEN                then
175		37		IDENTIFIER          sum
176		37		ASSIGN              :=
177		37		CONST_INTEGER       1
178		38		ELSE                else
179		38		IDENTIFIER          sum
180		38		ASSIGN              :=
181		38		CONST_INTEGER       0
182		38		SEMICOLON           ;
183		42		BEGIN               begin
184		43		END                 end
185		43		SEMICOLON           ;
186		46		IDENTIFIER          i
187		46		ASSIGN              :=
188		46		CONST_INTEGER       1
189		46		SEMICOLON           ;
190		47		IDENTIFIER          i
191		47		ASSIGN              :=
192		47		LEFT_PAREN          (
193		47		CONST_INTEGER       1
194		47		MUL                 *
195		47		CONST_INTEGER       2
196		47		RIGHT_PAREN         )
197		47		PLUS                +
198		47		LEFT_PAREN          (
199		47		CONST_INTEGER       3
200		47		MUL                 *
201		47		CONST_INTEGER       4
202		47		RIGHT_PAREN         )
203		47		DIV                 /
204		47		LEFT_PAREN          (
205		47		CONST_INTEGER       5
206		47		MUL                 *
207		47		CONST_INTEGER       6
208		47		PLUS                +
209		47		CONST_INTEGER       7
210		47		MUL                 *
211		47		CONST_INTEGER       8
212		47		RIGHT_PAREN         )
213		47		SEMICOLON           ;
214		48		IDENTIFIER          sequence
215		48		LEFT_BRACKET        [
216		48		CONST_INTEGER       0
217		48		RIGHT_BRACKET       ]
218		48		ASSIGN              :=
219		48		CONST_INTEGER       0
220		48		SEMICOLON           ;
221		49		FOR                 for
222		49		IDENTIFIER          j
223		49		ASSIGN              :=
224		49		IDENTIFIER          i
225		49		TO                  to
226		49		CONST_INTEGER       10
227		49		MUL                 *
228		49		CONST_INTEGER       10
229		49		MINUS               -
230		49		CONST_INTEGER       1
231		50		DO                  do
232		51		BEGIN               begin
233		52		IDENTIFIER          sequence
234		52		LEFT_BRACKET        [
235		52		IDENTIFIER          j
236		52		RIGHT_BRACKET       ]
237		52		ASSIGN              :=
238		52		IDENTIFIER          j
239		52		PLUS                +
240		52		IDENTIFIER          sequence
241		52		LEFT_BRACKET        [
242		52		IDENTIFIER          j
243		52		MINUS               -
244		52		CONST_INTEGER       1
245		52		RIGHT_BRACKET       ]
246		52		SEMICOLON           ;
247		53		IF                  if
248		53		CONST_INTEGER       0
249		53		EQU                 =
250		53		IDENTIFIER          sequence
251		53		LEFT_BRACKET        [
252		53		IDENTIFIER          j
253		53		RIGHT_BRACKET       ]
254		54		THEN                then
255		54		BREAK               break
256		54		SEMICOLON           ;
257		55		IF                  if
258		55		CONST_INTEGER       1
259		55		EQU                 =
260		55		IDENTIFIER          sequence
261		55		LEFT_BRACKET        [
262		55		IDENTIFIER          j
263		55		RIGHT_BRACKET       ]
264		56		THEN                then
265		57		ELSE                else
266		57		CONTINUE            continue
267		58		END                 end
268		58		SEMICOLON           ;
269		59		IDENTIFIER          sequence
270		59		LEFT_BRACKET        [
271		59		CONST_INTEGER       1
272		59		RIGHT_BRACKET       ]
273		59		ASSIGN              :=
274		59		MINUS               -
275		59		IDENTIFIER          sequence
276		59		LEFT_BRACKET        [
277		59		CONST_INTEGER       1
278		59		RIGHT_BRACKET       ]
279		59		SEMICOLON           ;
280		61		WHILE               while
281		61		IDENTIFIER          i
282		61		LT                  <
283		61		CONST_INTEGER       10
284		62		DO                  do
285		63		BEGIN               begin
286		64		IDENTIFIER          i
287		64		ASSIGN              :=
288		64		IDENTIFIER          i
289		64		PLUS                +
290		64		CONST_INTEGER       1
291		64		SEMICOLON           ;
292		65		IF                  if
293		65		CONST_INTEGER       3
294		65		EQU                 =
295		65		IDENTIFIER          i
296		66		THEN                then
297		67		BEGIN               begin
298		68		IDENTIFIER          i
299		68		ASSIGN              :=
300		68		IDENTIFIER          i
301		68		PLUS                +
302		68		CONST_INTEGER       2
303		68		SEMICOLON           ;
304		69		END                 end
305		70		ELSE                else
306		70		IF                  if
307		70		CONST_INTEGER       5
308		70		EQU                 =
309		70		IDENTIFIER          i
310		71		THEN                then
311		71		BREAK               break
312		72		ELSE                else
313		72		CONTINUE            continue
314		73		END                 end
315		73		SEMICOLON           ;
316		75		IDENTIFIER          sequence
317		75		LEFT_BRACKET        [
318		75		IDENTIFIER          sequence
319		75		LEFT_BRACKET        [
320		75		CONST_INTEGER       0
321		75		RIGHT_BRACKET       ]
322		75		RIGHT_BRACKET       ]
323		75		ASSIGN              :=
324		75		IDENTIFIER          sequence
325		75		LEFT_BRACKET        [
326		75		IDENTIFIER          sequence
327		75		LEFT_BRACKET        [
328		75		CONST_INTEGER       1
329		75		RIGHT_BRACKET       ]
330		75		PLUS                +
331		75		IDENTIFIER          sequence
332		75		LEFT_BRACKET        [
333		75		CONST_INTEGER       2
334		75		RIGHT_BRACKET       ]
335		75		PLUS                +
336		75		IDENTIFIER          sequence
337		75		LEFT_BRACKET        [
338		75		CONST_INTEGER       1
339		75		PLUS                +
340		75		CONST_INTEGER       2
341		75		RIGHT_BRACKET       ]
342		75		RIGHT_BRACKET       ]
343		75		SEMICOLON           ;
344		76		IDENTIFIER          i
345		76		ASSIGN              :=
346		76		CONST_CHAR          a
347		76		SEMICOLON           ;
348		77		IDENTIFIER          i
349		77		ASSIGN              :=
350		77		CONST_INTEGER       2147483647
351		77		SEMICOLON           ;
352		78		IDENTIFIER          i
353		78		ASSIGN              :=
354		78		IDENTIFIER          ARRLEN
355		78		SEMICOLON           ;
356		79		FOR                 for
357		79		IDENTIFIER          j
358		79		ASSIGN              :=
359		79		CONST_INTEGER       100
360		79		DOWNTO              downto
361		79		CONST_INTEGER       1
362		80		DO                  do
363		81		BEGIN               begin
364		82		WRITE               write
365		82		LEFT_PAREN          (
366		82		CONST_STRING        error for "sum"
367		82		RIGHT_PAREN         )
368		82		SEMICOLON           ;
369		83		IDENTIFIER          k
370		83		ASSIGN              :=
371		83		IDENTIFIER          sumF
372		83		LEFT_PAREN          (
373		83		IDENTIFIER          i
374		83		COMMA               ,
375		83		IDENTIFIER          j
376		83		PLUS                +
377		83		IDENTIFIER          i
378		83		RIGHT_PAREN         )
379		83		SEMICOLON           ;
380		84		IDENTIFIER          sum
381		84		ASSIGN              :=
382		84		IDENTIFIER          sumF
383		84		LEFT_PAREN          (
384		84		IDENTIFIER          sum
385		84		COMMA               ,
386		84		IDENTIFIER          j
387		84		MINUS               -
388		84		IDENTIFIER          i
389		84		RIGHT_PAREN         )
390		85		END                 end
391		85		SEMICOLON           ;
392		89		CASE                case
393		89		IDENTIFIER          sum
394		89		MUL                 *
395		89		CONST_INTEGER       2
396		89		PLUS                +
397		89		CONST_INTEGER       1
398		89		OF                  of
399		89		CONST_INTEGER       1
400		90		COLON               :
401		90		WRITE               write
402		90		LEFT_PAREN          (
403		90		CONST_STRING        error for sum
404		90		RIGHT_PAREN         )
405		90		SEMICOLON           ;
406		90		CONST_INTEGER       10101
407		91		COLON               :
408		91		WRITE               write
409		91		LEFT_PAREN          (
410		91		CONST_STRING        right for sum
411		91		RIGHT_PAREN         )
412		91		SEMICOLON           ;
413		91		CONST_INTEGER       520
414		92		COLON               :
415		92		WRITE               write
416		92		LEFT_PAREN          (
417		92		CONST_STRING        error for sum
418		92		RIGHT_PAREN         )
419		92		SEMICOLON           ;
420		93		IDENTIFIER          ARRLEN
421		93		COLON               :
422		93		WRITE               write
423		93		LEFT_PAREN          (
424		93		CONST_STRING        error for sum
425		93		RIGHT_PAREN         )
426		94		END                 end
427		94		SEMICOLON           ;
428		96		READ                read
429		96		LEFT_PAREN          (
430		96		IDENTIFIER          sum
431		96		RIGHT_PAREN         )
432		96		SEMICOLON           ;
433		97		IDENTIFIER          sumP
434		97		LEFT_PAREN          (
435		97		IDENTIFIER          ENDCHAR
436		97		COMMA               ,
437		97		IDENTIFIER          lastChar
438		97		COMMA               ,
439		97		IDENTIFIER          sum
440		97		RIGHT_PAREN         )
441		97		SEMICOLON           ;
442		98		IDENTIFIER          sumP
443		98		LEFT_PAREN          (
444		98		IDENTIFIER          ENDCHAR
445		98		COMMA               ,
446		98		CONST_CHAR          c
447		98		COMMA               ,
448		98		IDENTIFIER          sequence
449		98		LEFT_BRACKET        [
450		98		CONST_INTEGER       3
451		98		PLUS                +
452		98		CONST_INTEGER       5
453		98		RIGHT_BRACKET       ]
454		98		RIGHT_PAREN         )
455		98		SEMICOLON           ;
456		99		WRITE               write
457		99		LEFT_PAREN          (
458		99		IDENTIFIER          sum
459		99		RIGHT_PAREN         )
460		99		SEMICOLON           ;
461		100		WRITE               write
462		100		LEFT_PAREN          (
463		100		IDENTIFIER          sequence
464		100		LEFT_BRACKET        [
465		100		IDENTIFIER          j
466		100		PLUS                +
467		100		CONST_INTEGER       1
468		100		PLUS                +
469		100		CONST_INTEGER       2
470		100		RIGHT_BRACKET       ]
471		100		RIGHT_PAREN         )
472		102		END                 end
473		102		PERIOD              .
