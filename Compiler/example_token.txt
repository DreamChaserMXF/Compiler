TokenNumber	LineNumber	TokenType	    TokenValue
1		1		CONST               const
2		1		IDENTIFIER          ARRLEN
3		1		EQU                 =
4		1		CONST_INTEGER       100
5		1		COMMA               ,
6		1		IDENTIFIER          NEGATIVE
7		1		EQU                 =
8		1		CONST_INTEGER       -1
9		1		COMMA               ,
10		1		IDENTIFIER          TRUE
11		1		EQU                 =
12		1		CONST_INTEGER       1
13		1		COMMA               ,
14		1		IDENTIFIER          FALSE
15		1		EQU                 =
16		1		CONST_INTEGER       0
17		1		COMMA               ,
18		1		IDENTIFIER          ENDCHAR
19		1		EQU                 =
20		1		CONST_CHAR          a
21		1		SEMICOLON           ;
22		3		VAR                 var
23		3		IDENTIFIER          i
24		3		COMMA               ,
25		3		IDENTIFIER          j
26		3		COMMA               ,
27		3		IDENTIFIER          k
28		3		COLON               :
29		3		RW_INTEGER          integer
30		3		SEMICOLON           ;
31		4		IDENTIFIER          lastChar
32		4		COLON               :
33		4		RW_CHAR             char
34		4		SEMICOLON           ;
35		5		IDENTIFIER          sum
36		5		COLON               :
37		5		RW_INTEGER          integer
38		5		SEMICOLON           ;
39		6		IDENTIFIER          sequence
40		6		COLON               :
41		6		ARRAY               array
42		6		LEFT_BRACKET        [
43		6		CONST_INTEGER       100
44		6		RIGHT_BRACKET       ]
45		6		OF                  of
46		6		RW_INTEGER          integer
47		6		SEMICOLON           ;
48		9		PROCEDURE           procedure
49		9		IDENTIFIER          sumP
50		9		LEFT_PAREN          (
51		9		IDENTIFIER          x
52		9		COMMA               ,
53		9		IDENTIFIER          y
54		9		COLON               :
55		9		RW_CHAR             char
56		9		SEMICOLON           ;
57		9		VAR                 var
58		9		IDENTIFIER          result
59		9		COLON               :
60		9		RW_INTEGER          integer
61		9		RIGHT_PAREN         )
62		9		SEMICOLON           ;
63		10		VAR                 var
64		10		IDENTIFIER          tempSumP
65		10		COLON               :
66		10		RW_INTEGER          integer
67		10		SEMICOLON           ;
68		11		BEGIN               begin
69		12		IDENTIFIER          result
70		12		ASSIGN              :=
71		12		MINUS               -
72		12		IDENTIFIER          x
73		12		PLUS                +
74		12		IDENTIFIER          y
75		13		END                 end
76		13		SEMICOLON           ;
77		15		FUNCTION            function
78		15		IDENTIFIER          sumF
79		15		LEFT_PAREN          (
80		15		IDENTIFIER          x
81		15		COMMA               ,
82		15		IDENTIFIER          y
83		15		COLON               :
84		15		RW_INTEGER          integer
85		15		RIGHT_PAREN         )
86		15		COLON               :
87		15		RW_INTEGER          integer
88		15		SEMICOLON           ;
89		16		VAR                 var
90		16		IDENTIFIER          result
91		16		COLON               :
92		16		RW_INTEGER          integer
93		16		SEMICOLON           ;
94		17		PROCEDURE           procedure
95		17		IDENTIFIER          sumFF
96		17		LEFT_PAREN          (
97		17		IDENTIFIER          x
98		17		COMMA               ,
99		17		IDENTIFIER          y
100		17		COLON               :
101		17		RW_INTEGER          integer
102		17		RIGHT_PAREN         )
103		17		SEMICOLON           ;
104		18		VAR                 var
105		18		IDENTIFIER          z
106		18		COLON               :
107		18		RW_INTEGER          integer
108		18		SEMICOLON           ;
109		19		BEGIN               begin
110		20		IDENTIFIER          z
111		20		ASSIGN              :=
112		20		IDENTIFIER          x
113		20		PLUS                +
114		20		IDENTIFIER          y
115		20		PLUS                +
116		20		CONST_INTEGER       1
117		20		PLUS                +
118		20		IDENTIFIER          x
119		20		PLUS                +
120		20		IDENTIFIER          y
121		21		END                 end
122		21		SEMICOLON           ;
123		22		BEGIN               begin
124		23		IDENTIFIER          result
125		23		ASSIGN              :=
126		23		IDENTIFIER          x
127		23		PLUS                +
128		23		IDENTIFIER          y
129		23		SEMICOLON           ;
130		24		IDENTIFIER          sumF
131		24		ASSIGN              :=
132		24		IDENTIFIER          result
133		24		SEMICOLON           ;
134		25		IDENTIFIER          sumFF
135		25		LEFT_PAREN          (
136		25		IDENTIFIER          x
137		25		COMMA               ,
138		25		IDENTIFIER          y
139		25		RIGHT_PAREN         )
140		26		END                 end
141		26		SEMICOLON           ;
142		28		BEGIN               begin
143		30		IDENTIFIER          i
144		30		ASSIGN              :=
145		30		CONST_INTEGER       10
146		30		MUL                 *
147		30		CONST_INTEGER       10
148		30		SEMICOLON           ;
149		31		IF                  if
150		31		IDENTIFIER          i
151		31		NEQ                 <>
152		31		CONST_INTEGER       0
153		32		THEN                then
154		32		IDENTIFIER          i
155		32		ASSIGN              :=
156		32		CONST_INTEGER       0
157		32		SEMICOLON           ;
158		33		IDENTIFIER          i
159		33		ASSIGN              :=
160		33		IDENTIFIER          i
161		33		PLUS                +
162		33		CONST_INTEGER       1
163		33		SEMICOLON           ;
164		34		IDENTIFIER          sum
165		34		ASSIGN              :=
166		34		CONST_INTEGER       0
167		34		MUL                 *
168		34		IDENTIFIER          i
169		34		SEMICOLON           ;
170		36		IDENTIFIER          i
171		36		ASSIGN              :=
172		36		CONST_INTEGER       1
173		36		SEMICOLON           ;
174		37		IDENTIFIER          sequence
175		37		LEFT_BRACKET        [
176		37		CONST_INTEGER       0
177		37		RIGHT_BRACKET       ]
178		37		ASSIGN              :=
179		37		CONST_INTEGER       0
180		37		SEMICOLON           ;
181		38		FOR                 for
182		38		IDENTIFIER          j
183		38		ASSIGN              :=
184		38		IDENTIFIER          i
185		38		TO                  to
186		38		CONST_INTEGER       10
187		38		MUL                 *
188		38		CONST_INTEGER       10
189		38		MINUS               -
190		38		CONST_INTEGER       1
191		39		DO                  do
192		40		BEGIN               begin
193		41		IDENTIFIER          sequence
194		41		LEFT_BRACKET        [
195		41		IDENTIFIER          j
196		41		RIGHT_BRACKET       ]
197		41		ASSIGN              :=
198		41		IDENTIFIER          j
199		41		PLUS                +
200		41		IDENTIFIER          sequence
201		41		LEFT_BRACKET        [
202		41		IDENTIFIER          j
203		41		MINUS               -
204		41		CONST_INTEGER       1
205		41		RIGHT_BRACKET       ]
206		42		END                 end
207		42		SEMICOLON           ;
208		43		IDENTIFIER          sequence
209		43		LEFT_BRACKET        [
210		43		CONST_INTEGER       1
211		43		RIGHT_BRACKET       ]
212		43		ASSIGN              :=
213		43		MINUS               -
214		43		IDENTIFIER          sequence
215		43		LEFT_BRACKET        [
216		43		CONST_INTEGER       1
217		43		RIGHT_BRACKET       ]
218		43		SEMICOLON           ;
219		45		IDENTIFIER          sequence
220		45		LEFT_BRACKET        [
221		45		IDENTIFIER          sequence
222		45		LEFT_BRACKET        [
223		45		CONST_INTEGER       0
224		45		RIGHT_BRACKET       ]
225		45		RIGHT_BRACKET       ]
226		45		ASSIGN              :=
227		45		IDENTIFIER          sequence
228		45		LEFT_BRACKET        [
229		45		IDENTIFIER          sequence
230		45		LEFT_BRACKET        [
231		45		CONST_INTEGER       1
232		45		RIGHT_BRACKET       ]
233		45		PLUS                +
234		45		IDENTIFIER          sequence
235		45		LEFT_BRACKET        [
236		45		CONST_INTEGER       2
237		45		RIGHT_BRACKET       ]
238		45		PLUS                +
239		45		IDENTIFIER          sequence
240		45		LEFT_BRACKET        [
241		45		CONST_INTEGER       1
242		45		PLUS                +
243		45		CONST_INTEGER       2
244		45		RIGHT_BRACKET       ]
245		45		RIGHT_BRACKET       ]
246		45		SEMICOLON           ;
247		46		IDENTIFIER          i
248		46		ASSIGN              :=
249		46		CONST_CHAR          a
250		46		SEMICOLON           ;
251		47		IDENTIFIER          i
252		47		ASSIGN              :=
253		47		CONST_INTEGER       2147483647
254		47		SEMICOLON           ;
255		48		IDENTIFIER          i
256		48		ASSIGN              :=
257		48		IDENTIFIER          ARRLEN
258		48		SEMICOLON           ;
259		49		FOR                 for
260		49		IDENTIFIER          j
261		49		ASSIGN              :=
262		49		CONST_INTEGER       100
263		49		DOWNTO              downto
264		49		CONST_INTEGER       1
265		50		DO                  do
266		51		BEGIN               begin
267		52		WRITE               write
268		52		LEFT_PAREN          (
269		52		CONST_STRING        error for "sum"
270		52		RIGHT_PAREN         )
271		52		SEMICOLON           ;
272		53		IDENTIFIER          k
273		53		ASSIGN              :=
274		53		IDENTIFIER          sumF
275		53		LEFT_PAREN          (
276		53		IDENTIFIER          i
277		53		COMMA               ,
278		53		IDENTIFIER          j
279		53		PLUS                +
280		53		IDENTIFIER          i
281		53		RIGHT_PAREN         )
282		53		SEMICOLON           ;
283		54		IDENTIFIER          sum
284		54		ASSIGN              :=
285		54		IDENTIFIER          sumF
286		54		LEFT_PAREN          (
287		54		IDENTIFIER          sum
288		54		COMMA               ,
289		54		IDENTIFIER          j
290		54		MINUS               -
291		54		IDENTIFIER          i
292		54		RIGHT_PAREN         )
293		55		END                 end
294		55		SEMICOLON           ;
295		59		CASE                case
296		59		IDENTIFIER          sum
297		59		OF                  of
298		59		CONST_INTEGER       0
299		60		COLON               :
300		60		WRITE               write
301		60		LEFT_PAREN          (
302		60		CONST_STRING        error for sum
303		60		RIGHT_PAREN         )
304		60		SEMICOLON           ;
305		60		CONST_INTEGER       5050
306		61		COLON               :
307		61		WRITE               write
308		61		LEFT_PAREN          (
309		61		CONST_STRING        right for sum
310		61		RIGHT_PAREN         )
311		62		END                 end
312		62		SEMICOLON           ;
313		64		READ                read
314		64		LEFT_PAREN          (
315		64		IDENTIFIER          sum
316		64		RIGHT_PAREN         )
317		64		SEMICOLON           ;
318		65		IDENTIFIER          sumP
319		65		LEFT_PAREN          (
320		65		IDENTIFIER          ENDCHAR
321		65		COMMA               ,
322		65		IDENTIFIER          lastChar
323		65		COMMA               ,
324		65		IDENTIFIER          sum
325		65		RIGHT_PAREN         )
326		65		SEMICOLON           ;
327		66		IDENTIFIER          sumP
328		66		LEFT_PAREN          (
329		66		IDENTIFIER          ENDCHAR
330		66		COMMA               ,
331		66		CONST_CHAR          c
332		66		COMMA               ,
333		66		IDENTIFIER          sequence
334		66		LEFT_BRACKET        [
335		66		CONST_INTEGER       3
336		66		PLUS                +
337		66		CONST_INTEGER       5
338		66		RIGHT_BRACKET       ]
339		66		RIGHT_PAREN         )
340		66		SEMICOLON           ;
341		67		WRITE               write
342		67		LEFT_PAREN          (
343		67		IDENTIFIER          sum
344		67		RIGHT_PAREN         )
345		67		SEMICOLON           ;
346		68		WRITE               write
347		68		LEFT_PAREN          (
348		68		IDENTIFIER          sequence
349		68		LEFT_BRACKET        [
350		68		IDENTIFIER          j
351		68		PLUS                +
352		68		CONST_INTEGER       1
353		68		PLUS                +
354		68		CONST_INTEGER       2
355		68		RIGHT_BRACKET       ]
356		68		RIGHT_PAREN         )
357		70		END                 end
358		70		PERIOD              .
